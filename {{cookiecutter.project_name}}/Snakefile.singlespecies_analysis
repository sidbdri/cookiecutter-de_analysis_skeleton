include: "Snakefile.common"

rule star:
    input:
        fastq = lambda wildcards: retrieve_fastqs(wildcards.sample)
    output:
        bam = "results/mapped_reads/{sample}.bam",
        sorted_bam = "results/mapped_reads/{sample}.sorted.bam",
        final_log = "results/mapped_reads/{sample}.log.out",
        log = "results/mapped_reads/{sample}Log.out",
        progress = temp("results/mapped_reads/{sample}Log.progress.out"),
        SJ = temp("results/mapped_reads/{sample}SJ.out.tab")
    params:
        index = MAPPER_INDEX,
        star = STAR_EXECUTABLE,
        output_dir = lambda wildcards, output: os.path.join(os.path.dirname(output.bam),  wildcards.sample),
        read1_suffix=READ1_SUFFIX,
        read2_suffix=READ2_SUFFIX
    log: "results/logs/star/{sample}.log"
    threads: NUM_THREADS_PER_SAMPLE 
    shell:

        """
        forward_reads=`ls {input.fastq} | grep {params.read1_suffix}'.{{ cookiecutter.fastq_suffix }}' || printf ' '`
        forward_reads=`echo "$forward_reads" | paste -d "," -s -`
        reverse_reads=`ls {input.fastq} | grep {params.read2_suffix}'.{{ cookiecutter.fastq_suffix }}' || printf ' '`
        reverse_reads=`echo "$reverse_reads" | paste -d "," -s -`

        if [ "{params.is_paired_end}" = "no" ]; then
            reverse_reads=''
        fi

        {params.star} --runThreadN {threads} --genomeDir {params.index} --outFileNamePrefix {params.output_dir} --outSAMstrandField intronMotif --outSAMtype BAM SortedByCoordinate Unsorted --readFilesCommand zcat --readFilesIn $forward_reads $reverse_reads  > {log} 2>&1
        
        mv  "results/mapped_reads/{wildcards.sample}Aligned.out.bam" {output.bam}
        mv results/mapped_reads/{wildcards.sample}Aligned.sortedByCoord.out.bam {output.sorted_bam}
        mv results/mapped_reads/{wildcards.sample}Log.final.out {output.final_log}
        """

rule bam_per_species:
    input:
        "results/mapped_reads/{sample}.sorted.bam"
    output:
        "results/final_bams/{sample}.{species}.bam"
    threads: NUM_THREADS_PER_SAMPLE
    shell:
        """
        ln -sr {input} {output}
        """

rule index_bam:
    input:
        "results/final_bams/{sample}.{species}.bam"
    output:
        "results/final_bams/{sample}.{species}.bam.bai"
    threads: NUM_THREADS_PER_SAMPLE
    shell:
        """
        sambamba index -t {threads} {input} {output}
        """

rule bams:
    input:
        indexed_bams = expand("results/final_bams/{sample}.{species}.bam.bai", sample=SAMPLES, species=SPECIES),
        salmon_quant = expand("results/salmon_quant/{species}/{sample}/quant.sf", sample=SAMPLES, species=SPECIES)

rule multiqc:
    input:
         fc = expand("results/read_counts/{sample}.{species}.counts", sample=SAMPLES, species=SPECIES),
         picard = expand("results/alignment_metrics/{species}/{sample}.txt", sample=SAMPLES, species=SPECIES),
         fastqc = expand("results/fastqc/{sample}/stdin_fastqc.html", sample=SAMPLES)
    output:
        "multiqc_report.html"
    params:
        input_dir = "results"
    shell:
        """
        multiqc --interactive -d -f -m featureCounts -m {{ "star" if cookiecutter.data_type=="rnaseq" else "bowtie" }} -m fastqc -m salmon -m sargasso -m picard {params.input_dir}
        """

rule salmon:
    input:
        fastq = lambda wildcards: retrieve_fastqs(wildcards.sample)
    output:
        quant_file_tx="results/salmon_quant/{species}/{sample}/quant.sf",
        quant_file_gene="results/salmon_quant/{species}/{sample}/quant.genes.sf"
    params:
        index = lambda wildcards: SALMON_INDEX[wildcards.species],
        salmon = SALMON_EXECUTABLE,
        gtf = lambda wildcards: gtf_dict[wildcards.species],
        output_dir = "results/salmon_quant/{species}/{sample}",
        read1_suffix=READ1_SUFFIX,
        read2_suffix=READ2_SUFFIX,
        is_paired_end=IS_PAIRED_END
    log: "results/logs/salmon/{species}.{sample}.log"
    threads: NUM_THREADS_PER_SAMPLE
    shell:
        """
        forward_reads=`ls {input.fastq} | grep {params.read1_suffix}'.{{ cookiecutter.fastq_suffix }}' || printf ' '`
        forward_reads=`echo "$forward_reads" | paste -d " " -s -`
        reverse_reads=`ls {input.fastq} | grep {params.read2_suffix}'.{{ cookiecutter.fastq_suffix }}' || printf ' '`
        reverse_reads=`echo "$reverse_reads" | paste -d " " -s -`


        if [ "{params.is_paired_end}" = "no" ]; then
            {params.salmon} quant -i {params.index} -l A --validateMappings -r $forward_reads \
                        -o {params.output_dir} --seqBias --gcBias -p {threads} \
                        -g {params.gtf}  > {log} 2>&1
        else
            {params.salmon} quant -i {params.index} -l A --validateMappings -1 $forward_reads -2 $reverse_reads \
                        -o {params.output_dir} --seqBias --gcBias -p {threads} \
                        -g {params.gtf}  > {log} 2>&1
        fi



        """




